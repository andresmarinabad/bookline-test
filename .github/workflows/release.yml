name: Auto Version, Changelog, Release, Build & Push

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
    
    outputs:
      version: ${{ steps.bump.outputs.version }}
      tag: v${{ steps.bump.outputs.version }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Commitizen
        run: pip install commitizen

      - name: Configure Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Bump version and changelog
        id: bump
        run: |
          cz bump --yes --changelog
          VERSION=$(cz version --project)
          echo "version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Push version bump commit and tag
        run: |
          git push origin main --follow-tags

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.bump.outputs.version }}
          name: "Release v${{ steps.bump.outputs.version }}"
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: v${{ needs.release.outputs.version }}
          fetch-tags: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version from tag
        id: vars
        run: |
          echo "version=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}
          docker build -t $IMAGE_NAME:${{ steps.vars.outputs.version }} .
          docker tag $IMAGE_NAME:${{ steps.vars.outputs.version }} $IMAGE_NAME:latest

      - name: Push Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository }}
          docker push $IMAGE_NAME:${{ steps.vars.outputs.version }}
          docker push $IMAGE_NAME:latest